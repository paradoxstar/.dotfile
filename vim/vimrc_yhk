"==========================================
" Author:  Hongkun Yu
" Version: 0.0
" Email: staryhk@gmail.com
" Last_modify: 2015-09-27
" Sections:
"   1. Initial Plugin 加载插件
"  	    ->Plugin Settings in .vimrc.plugins
"   2. General Settings 基础设置
"   3. Display Settings 展示/排版等界面格式设置
"   4. Format Settings 编码/格式设置
"   5. Theme Settings  主题设置
"   6. Ctags Settings  Ctags设置
"   7. mapping Settings  快捷键设置
"   8. Other Settings  其他设置
"==========================================


"==================================================
"  Initial Plugin 加载插件  
"==================================================

" install plugins
if filereadable(expand("$DOTFILEDIR/vim/vimrc_plugins_yhk.vim"))
  execute 'source'expand("$DOTFILEDIR/vim/vimrc_plugins_yhk.vim")
endif

"=========================================================================================================================


"==================================================
" General Settings 基础设置
"==================================================

" Enable syntax highlighting
" 开启语法高亮
syntax on

"set guifont=Monaco:h20          " 字体 && 字号

" history存储容量
set history=2000

" 检测文件类型
filetype on
" 针对不同的文件类型采用不同的缩进格式
filetype indent on
" 允许插件
filetype plugin on
" 启动自动补全
filetype plugin indent on

" 修改leader键
let mapleader = ','
let g:mapleader = ','

"############ Files, backups and undo #####################

" Set to auto read when a file is changed from the outside 
" 文件修改之后自动载入
set autoread

" turn off backup
set nobackup
" turn off sawpfile
set noswapfile

"create undo file
let &undodir = expand("$ACTHOME/.cache/vim/undo")
if !isdirectory(&undodir)
  call mkdir(expand(&undodir), 'p')
endif
set undolevels=1000         " How many undos
set undoreload=10000        " number of lines to save for undo
set undofile                " So is persistent undo ...

" Remember info about open buffers on close"
set viminfo^=%

"########################################################
 

"- 则点击光标不会换,用于复制
" set mouse-=a                "鼠标暂不启用, 键盘党....
" set mouse=a                 " Automatically enable mouse usage
" set mousehide               " Hide the mouse cursor while typing
set mouse=a

"设置 退出vim后，内容显示在终端屏幕, 可以用于查看和复制:
"好处：误删什么的，如果以前屏幕打开，可以找回
"set t_ti= t_te=

" No annoying sound on errors
" 去掉输入错误的提示声音
set title                " change the terminal's title
set visualbell           " enable visual bell
set noerrorbells         " don't beep
set t_vb=
set tm=500

" For regular expressions turn magic on
" 除了 $ . * ^ 之外其他元字符都要加反斜杠
set magic

" allow backspacing over everything in insert mode
" indent: 如果用了:set indent,:set ai 等自动缩进，想用退格键将字段缩进的删掉
" 必须设置这个选项。否则不响应。
" eol:如果插入模式下在行开头，想通过退格键合并两行，需要设置eol。
" start：要想删除此次插入前的输入，需设置这个。
set backspace=eol,start,indent

" 光标到达行尾或者行首时，特定键继续移动转至下一行或上一行
set whichwrap+=b,s,<,>,[,]

" 修复ctrl+m 多光标操作选择的bug，但是改变了ctrl+v进行字符选中时将包含光标下的字符
"set selection=exclusive
set selection=inclusive
set selectmode=mouse,key

" 在处理未保存或只读文件的时候，弹出确认 
set confirm 

"===============================================================================================================================


"===================================================================
" Display Settings 展示/排版等界面格式设置
"===================================================================

" 启动的时候不显示那个援助索马里儿童的提示
set shortmess=atI   

"############# row && column #########################   
" 显示行号：
set number
" 取消换行。
"set nowrap
set linebreak                                       "wrap long lines
set display+=lastline                               "as much as possible of the last line will be displayed
"#####################################################

"################# cursor #####################
" 突出显示当前行等
"set cursorcolumn
"set cursorline          " 突出显示当前行

" 在上下移动光标时，光标的上方或下方至少会保留显示的行数
set scrolloff=7
"################################################

"################# cmdline && statusline #################

" 显示当前的行号列号：
"set ruler
" 在状态栏显示正在输入的命令
set showcmd
" 左下角显示当前vim模式
"set showmode

" 命令行（在状态行下）的高度，默认为1，这里是2
set cmdheight=1
" Turn on the WiLd menu
" 自动补全命令时候使用菜单式匹配列表
set wildmenu
set wildmode=list:longest
set wildignorecase

" Always show the status line - use 2 lines for the status bar
set laststatus=2

" statusline setting
"set statusline=%<%f\ %h%m%r%=%k[%{(&fenc==\"\")?&enc:&fenc}%{(&bomb?\",BOM\":\"\")}]\ %-14.(%l,%c%V%)\ %P
"set statusline=%<%F\ %h%m%r%=%{&ff}\%Y\ [ascii:%b\ hex:0x\%02.2B]\ [%{(&fenc==\"\")?&enc:&fenc}%{(&bomb?\",BOM\":\"\")}]\ %-14.(%l,%c%V%)\ %P

"#########################################################



"################################# search && match #######################################
"设置文内智能搜索提示
" 高亮search命中的文本。
set hlsearch
" 打开增量搜索模式,随着键入即时搜索
set incsearch
" 搜索时忽略大小写
set ignorecase
" 有一个或以上大写字母时仍大小写敏感
set smartcase     " ignore case if search pattern is all lowercase, case-sensitive otherwise


" 括号配对情况,跳转并高亮一下匹配的括号
set showmatch
" How many tenths of a second to blink when matching brackets
set matchtime=2
"###########################################################################################


"################################# ident && fold #######################################
" 缩进配置
set smartindent   " Smart indent
set autoindent    " 打开自动缩进
" never add copyindent, case error   " copy the previous indentation on autoindenting

" 代码折叠
set foldenable
" 折叠方法
" manual    手工折叠
" indent    使用缩进表示折叠
" expr      使用表达式定义折叠
" syntax    使用语法定义折叠
" diff      对没有更改的文本进行折叠
" marker    使用标记进行折叠, 默认标记是 {{{ 和 }}}
set foldmethod=indent
set foldlevel=99
" 代码折叠自定义快捷键
let g:FoldMethod = 0
map <leader>zz :call ToggleFold()<cr>
fun! ToggleFold()
    if g:FoldMethod == 0
        exe "normal! zM"
        let g:FoldMethod = 1
    else
        exe "normal! zR"
        let g:FoldMethod = 0
    endif
endfun
"###########################################################################################


"#################################  tab #######################################

set tabstop=2     " 设置Tab键的宽度        [等同的空格个数]
set shiftwidth=2  " 每一次缩进对应的空格数
set softtabstop=2 " 按退格键时可以一次删掉 4 个空格
set smarttab      " insert tabs on the start of a line according to shiftwidth, not tabstop 按退格键时可以一次删掉 4 个空格
set expandtab     " 将Tab自动转化成空格    [需要输入真正的Tab键时，使用 Ctrl+V + Tab]
set shiftround    " 缩进时，取整 use multiple of shiftwidth when indenting with '<' and '>'
"###########################################################################################


"===============================================================================================================================



"==========================================
" FileEncode Settings 文件编码,格式
"==========================================
" 设置新文件的编码为 UTF-8
set encoding=utf-8
" 自动判断编码时，依次尝试以下编码：
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1
set helplang=cn
"set langmenu=zh_CN.UTF-8
"set enc=2byte-gb18030
" 下面这句只影响普通模式 (非图形界面) 下的 Vim。
set termencoding=utf-8

" Use Unix as the standard file type
set ffs=unix,dos,mac

" 如遇Unicode值大于255的文本，不必等到空格再折行。
set formatoptions+=m
" 合并两行中文时，不在中间加空格：
set formatoptions+=B

set viewoptions=folds,options,cursor,unix,slash     "unix/windows compatibility
set backspace=indent,eol,start                      "allow backspacing everything in insert mode
"===============================================================================================================================



"==========================================
" Theme Settings  主题设置
"==========================================

" Set extra options when running in GUI mode
if has("gui_running")
    set guifont=Monaco:h14
    if has("gui_gtk2")   "GTK2
        set guifont=Monaco\ 12,Monospace\ 12
    endif
    set guioptions-=T
    set guioptions+=e
    set guioptions-=r
    set guioptions-=L
    set guitablabel=%M\ %t
    set showtabline=1
    set linespace=2
    set noimd
    set t_Co=256
endif

" allows cursor change in tmux mode
if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif


" 设置标记一列的背景颜色和数字一行颜色一致
hi! link SignColumn   LineNr
hi! link ShowMarksHLl DiffAdd
hi! link ShowMarksHLu DiffChange

" for error highlight，防止错误整行标红导致看不清
highlight clear SpellBad
highlight SpellBad term=standout ctermfg=1 term=underline cterm=underline
highlight clear SpellCap
highlight SpellCap term=underline cterm=underline
highlight clear SpellRare
highlight SpellRare term=underline cterm=underline
highlight clear SpellLocal
highlight SpellLocal term=underline cterm=underline

"===============================================================================================================================



"==========================================
" Ctags setting ctags设置
"==========================================
"----
" 按下F重新生成tag文件，并更新taglist
map <leader>t :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR><CR> :TlistUpdate<CR>
imap <leader>t <ESC>:!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR><CR> :TlistUpdate<CR>
set tags=tags
set tags+=./tags "add current directory's generated tags file


"===============================================================================================================================


"==========================================
" 快捷键设置设置
"==========================================
" Quickly close the current window
nnoremap <leader>q :q<CR>
" Quickly save the current file
nnoremap <leader>w :w<CR>


"go F5 -> go run
au FileType go nmap <F5> <Plug>(go-run)
"c/c++/java/sh  按F5编译运行
au Filetype c nmap <F5> :call CompileRun()<CR>
au Filetype c++ nmap <F5> :call CompileRun()<CR>
au Filetype java nmap <F5> :call CompileRun()<CR>
au Filetype sh nmap <F5> :call CompileRun()<CR>
au Filetype tex nmap <F5> :call CompileRun()<CR>

func! CompileRun()
    exec "w"
    if &filetype == 'c'
        exec "!g++ % -o %<"
        exec "! ./%<"
    elseif &filetype == 'cpp'
        exec "!g++ % -o %<"
        exec "! ./%<"
    elseif &filetype == 'java' 
        exec "!javac %" 
        exec "!java %<"
    elseif &filetype == 'sh'
        :!./%
    elseif &filetype == 'tex'
        exec "!pdflatex %" 
        exec "!open %<.pdf" 
    endif
endfunc

" F2 行号开关，用于鼠标复制代码用
" F3 显示可打印字符开关
" F6 语法开关，关闭语法可以加快大文件的展示


" 为方便复制，用<F2>开启/关闭行号显示:
" function! HideNumber()
"   if(&relativenumber == &number)
"     set relativenumber! number!
"   elseif(&number)
"     set number!
"   else
"     set relativenumber!
"   endif
"   set number?
" endfunc
" nnoremap <F2> :call HideNumber()<CR>
nnoremap <F1> :set number! number?<CR>
nnoremap <F2> :set relativenumber! relativenumber?<CR>


nnoremap <F3> :set list! list?<CR>
nnoremap <F6> :exec exists('syntax_on') ? 'syn off' : 'syn on'<CR>



"Smart way to move between windows 分屏窗口移动
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Go to home and end using capitalized directions
noremap H ^
noremap L $


"Map ; to : and save a million keystrokes
" ex mode commands made easy 用于快速进入命令行
nnoremap ; :

"使用tab键来代替%进行匹配跳转
nmap <tab> %
vmap <tab> %
"===============================================================================================================================


"==========================================
" others 其它设置
"==========================================
autocmd! bufwritepost _vimrc source % " vimrc文件修改之后自动加载。 windows。
autocmd! bufwritepost .vimrc source % " vimrc文件修改之后自动加载。 linux。















